from multiprocessing import Process,Value, Arrayfrom scipy.optimize import Boundsfrom scipy.optimize import minimizefrom scipy.optimize import minimize_scalarimport historyMatchingPNMimport numpy as npfrom math import pi#global originalPathimport matplotlib.pyplot as pltimport warningswarnings.simplefilter("ignore")##ØrenØrenØrenØrenØrenØrenØrenØrenØrenØrenØrenØrenØrenØrenØrenØrenØrenØrenØrenØrenPTDist = 'y'SA  = 'n'Opt = 'n'WWL = 'n'MWL = 'n'WWK = 'n'MWA = 'n'HM_MWA = 'n'HM = 'n'readWWKamalExp = 'n'readnewWWKamalExp = 'n'readAlessioExp = 'n'if(readAlessioExp == 'y'):    keyWord0 = 'iciwKcSwKrsQs'    folderName = 'MWAlessio'    xmfFileNames = 'drns_3dl.xmf'    #'/data/0Sajjad/PNM/historyMatch/+'    originalPath = folderName+'/'    n,fP,fT,Sw = historyMatchingPNM.readKeywordInXMFFile(keyWord0,originalPath+xmfFileNames)    np.savetxt(originalPath+'fPores.dat',1-fP.transpose(),fmt='%.1d')#.transpose()    np.savetxt(originalPath+'SwPores.dat',Sw.transpose(),fmt='%.6f')#.transpose()    np.savetxt(originalPath+'fThroats.dat',1-fT.transpose(),fmt='%.1d')#.transpose()    np.savetxt(originalPath+'ktn_pores.dat',fP[:,0],fmt='%.1d')    np.savetxt(originalPath+'ktn_throats.dat',fT[:,0],fmt='%.1d')    nP = np.shape(fP[:,0])[0]    nT = np.shape(fT[:,0])[0]      np.savetxt(originalPath+'CAFile_pores.dat',np.ones((nP,1))*130.0,fmt='%.2f')    np.savetxt(originalPath+'CAFile_throats.dat',np.ones((nT,1))*130.0,fmt='%.2f')elif(readnewWWKamalExp=='y'):    keyWord0 = 'iciwKcSwKrsQs'        xmfFileNames = 'KtnImbs_3dl.xmf'    originalPath = 'newWWKamal/'    n,fP,fT = historyMatchingPNM.readKeywordInXMFFile(keyWord0,originalPath+xmfFileNames)    np.savetxt(originalPath+'fPores.dat',fP.transpose(),fmt='%.1d')#.transpose()    np.savetxt(originalPath+'fThroats.dat',fT.transpose(),fmt='%.1d')#.transpose()    np.savetxt(originalPath+'ktnSeg1000R1100xFilt_pores.dat',1-fP[:,0],fmt='%.1d')    np.savetxt(originalPath+'ktnSeg1000R1100xFilt_throats.dat',1-fT[:,0],fmt='%.1d')    nP = np.shape(fP[:,0])[0]    nT = np.shape(fT[:,0])[0]    np.savetxt(originalPath+'CAFile_pores.dat',np.ones((nP,1))*40.0,fmt='%.2f')    np.savetxt(originalPath+'CAFile_throats.dat',np.ones((nT,1))*40.0,fmt='%.2f')    print('I am HERE')    print('I am HERE') elif(readWWKamalExp=='y'):    keyWord0 = 'iciwPcSwKrsQs'    xmfFileNames = 'KtnImbs_3dl.xmf'    originalPath = 'WWKamal/'    n,fP,fT,Sw = historyMatchingPNM.readKeywordInXMFFile(keyWord0,originalPath+xmfFileNames)    np.savetxt(originalPath+'fPores.dat',fP.transpose(),fmt='%.1d')#.transpose()    np.savetxt(originalPath+'SwPores.dat',Sw.transpose(),fmt='%.6f')#.transpose()    np.savetxt(originalPath+'fThroats.dat',fT.transpose(),fmt='%.1d')#.transpose()    np.savetxt(originalPath+'KamalBGS_pores.dat',1-fP[:,0],fmt='%.1d')    np.savetxt(originalPath+'KamalBGS_throats.dat',1-fT[:,0],fmt='%.1d')    nP = np.shape(fP[:,0])[0]    nT = np.shape(fT[:,0])[0]    np.savetxt(originalPath+'CAFile_pores.dat',np.ones((nP,1))*70.0,fmt='%.2f')    np.savetxt(originalPath+'CAFile_throats.dat',np.ones((nT,1))*70.0,fmt='%.2f')elif(HM_MWA == 'y'):    #originalPath = '/data/0Sajjad/PNM/historyMatch/MWAlessio/'    originalPath = 'MWAlessio/'    tOut1, tOut2, pOut, fExpPore, fExpThroat = historyMatchingPNM.readExpDataDAT(originalPath)    historyMatchingPNM.runHistoryMatch(0,1.0)elif(HM == 'y'):    originalPath = 'MWAlessio/'#'MWLewis/'#'WWKamal/'#'TDMWAlessio/'#'newWWKamal/'#'WWKamal/'    tOut1, tOut2, pOut, fExpPore, fExpThroat,SwExpPore,throatFraction = historyMatchingPNM.readExpDataDAT(originalPath)    #historyMatchingPNM.runHistoryMatch(1,1.8,90,0.060)#WWLewis    historyMatchingPNM.runHistoryMatch(1,1.8,180,0.05)#MWLewiselif(MWA == 'y'):    originalPath = 'MWAlessio/'#'WWLewis'#    tOut1, tOut2, pOut, fExpPore, fExpThroat = historyMatchingPNM.readExpDataDAT(originalPath)    historyMatchingPNM.OFCallable([0, 0],originalPath,True)    historyMatchingPNM.plotDistributionError('MWAlessio',21)elif(WWK == 'y'):    originalPath = 'WWKamal/'    tOut1, tOut2, pOut, fExpPore, fExpThroat,SwExpPore = historyMatchingPNM.readExpDataDAT(originalPath)    historyMatchingPNM.OFCallable([0, 0],originalPath,'V',True)    historyMatchingPNM.plotDistributionError('WWKamal',51,'V')elif(WWL=='y'):    tInitial = 0    originalPath = 'WWLewis/'#'inputFiles/'    historyMatchingPNM.folderPath(originalPath)    #fileName = 'BentheimerMixWetLewis_0_InitEnd_match.vtu'    tOut1, tOut2, pOut, fExpPore, fExpThroat,SwExpPore = historyMatchingPNM.readMappingResults(False)    print("XXXXXXXXXXXXXXXXXXXXX")    #'''    m,nP = np.shape(fExpPore)    print('====================')    print('6 : ',np.sum(fExpPore[6,:]))    print('0 : ',np.sum(fExpPore[0,:]))    print('====================')    tInitial = 10    tFinal   = 90#80    thetaPore = np.ones((nP,1))*tInitial    p = 0;    dTheta = (tFinal-tInitial)/(m-p);    thetaPVector = np.zeros(m)    thetaPFequency = np.zeros(m)    tempTheta = tInitial;    for i in range(m):        b=0        if(i<0):            b=tInitial        a = fExpPore[i,:].reshape(-1,1)        thetaPore= thetaPore + a*dTheta-b        tempTheta = tempTheta + dTheta        thetaPVector[i] = tempTheta        thetaPFequency[i] = np.sum(a)/nP        #thetaPore[thetaPore>(tFinal-0.01)] = 180#tInitial    m,nT = np.shape(fExpThroat)    thetaThroat = np.ones((nT,1))*tInitial    thetaTVector = np.zeros(m)    thetaTFequency = np.zeros(m)    fw = np.arange(1,m+1)    tempTheta = tInitial;    for i in range(m):        b=0        if(i<0):            b=tInitial        a = fExpThroat[i,:].reshape(-1,1)        thetaThroat= thetaThroat + a*dTheta-b        tempTheta = tempTheta + dTheta        thetaTVector[i] = tempTheta        thetaTFequency[i] = np.sum(a)/nT            #thetaThroat[thetaThroat>(tFinal-0.01)] = 180#tInitial    thetaPore = np.ones((nP,1))*47.8#15.0#    thetaThroat = np.ones((nT,1))*47.8#15.0#    np.savetxt(originalPath+'CAFile_pores.dat',thetaPore,fmt='%.2f')    np.savetxt(originalPath+'CAFile_throats.dat',thetaThroat,fmt='%.2f')        #historyMatchingPNM.folderPath(originalPath)    #fileName = 'BentheimerMixWetLewis_0_InitEnd_match.vtu'    #tOut1, tOut2, pOut, fExpPore, fExpThroat = historyMatchingPNM.readMappingResults(False)    historyMatchingPNM.readExpDataVTU()    #historyMatchingPNM.OFCallable([tInitial, 0],originalPath,'F',True)    #historyMatchingPNM.plotDistributionError('WWLewis')    elif(MWL=='y'):    originalPath = 'MWLewis/'#'inputFiles/'    historyMatchingPNM.folderPath(originalPath)    #fileName = 'BentheimerMixWetLewis_0_InitEnd_match.vtu'    tOut1, tOut2, pOut, fExpPore, fExpThroat,SwExpPore = historyMatchingPNM.readMappingResults(False)    #'''    m,nP = np.shape(fExpPore)    print('====================')    print('7 : ',np.sum(fExpPore[7,:]))    print('0 : ',np.sum(fExpPore[0,:]))    print('====================')    tInitial = 45    tFinal   = 170    thetaPore = np.ones((nP,1))*tInitial    p = 0;    dTheta = (tFinal-tInitial)/(m-p);    thetaPVector = np.zeros(m)    thetaPFequency = np.zeros(m)    tempTheta = tInitial;    for i in range(m):        b=0        if(i<0):            b=tInitial        a = fExpPore[i,:].reshape(-1,1)        thetaPore= thetaPore + a*dTheta-b        tempTheta = tempTheta + dTheta        thetaPVector[i] = tempTheta        thetaPFequency[i] = np.sum(a)/nP        #thetaPore[thetaPore>(tFinal-0.01)] = 180#tInitial    m,nT = np.shape(fExpThroat)    thetaThroat = np.ones((nT,1))*tInitial    thetaTVector = np.zeros(m)    thetaTFequency = np.zeros(m)    fw = np.arange(1,m+1)    tempTheta = tInitial;    for i in range(m):        b=0        if(i<0):            b=tInitial        a = fExpThroat[i,:].reshape(-1,1)        thetaThroat= thetaThroat + a*dTheta-b        tempTheta = tempTheta + dTheta        thetaTVector[i] = tempTheta        thetaTFequency[i] = np.sum(a)/nT            #thetaThroat[thetaThroat>(tFinal-0.01)] = 180#tInitial    thetaPore = np.ones((nP,1))*120.0    thetaThroat = np.ones((nT,1))*120.0    #np.savetxt(originalPath+'CAFile_pores.dat',thetaPore,fmt='%.2f')    #np.savetxt(originalPath+'CAFile_throats.dat',thetaThroat,fmt='%.2f')    print('====================')    print('7 : ',np.sum(fExpThroat[7,:]))    print('0 : ',np.sum(fExpThroat[0,:]))    print('====================')    historyMatchingPNM.readExpDataVTU()    for i in range(m):        print(historyMatchingPNM.getSwFromImage(i))    '''    N = m    thetaPFequency[0:-2]= thetaPFequency[0:-2] - thetaPFequency[1:-1]    width = 5    plt.figure(1)    plt.bar(thetaPVector , thetaPFequency, width)    plt.ylabel('Frequency (%)')    plt.xlabel('${\Theta}$')    plt.title('${\Theta}$ used for pores')    plt.xticks(thetaPVector)#, ('${\Theta}$1', '${\Theta}$2', '${\Theta}$3', '${\Theta}$4', '${\Theta}$5'))    #plt.legend(loc='best')    #plt.show()    plt.savefig('thetaPores.tiff')    plt.figure(2)    width = 5.0/15.4    plt.bar(fw , thetaPFequency, width)    plt.ylabel('Frequency (%)')    plt.xlabel('$f_{wi}$')    plt.title('Frequency of pores filled at each $f_{w}$')    plt.xticks(fw, ('$f_{w1}$', '$f_{w2}$', '$f_{w3}$', '$f_{w4}$', '$f_{w5}$', '$f_{w6}$', '$f_{w7}$', '$f_{w8}$'))    #plt.legend(loc='best')    #plt.show()    plt.savefig('fwPores.tiff')    thetaTFequency[0:-2]= thetaTFequency[0:-2] - thetaTFequency[1:-1]    width = 5    plt.figure(3)    plt.bar(thetaTVector , thetaTFequency, width)    plt.ylabel('Frequency (%)')    plt.xlabel('${\Theta}$')    plt.title('${\Theta}$ used at throats')    plt.xticks(thetaTVector)#, ('${\Theta}$1', '${\Theta}$2', '${\Theta}$3', '${\Theta}$4', '${\Theta}$5'))    #plt.legend(loc='best')    #plt.show()    plt.savefig('thetaThroats.tiff')    plt.figure(4)    width = 5.0/15.4    plt.bar(fw , thetaTFequency, width)    plt.ylabel('Frequency (%)')    plt.xlabel('$f_{wi}$')    plt.title('Frequency of throats filled for each $f_{w}$')    plt.xticks(fw, ('$f_{w1}$', '$f_{w2}$', '$f_{w3}$', '$f_{w4}$', '$f_{w5}$', '$f_{w6}$', '$f_{w7}$', '$f_{w8}$'))    #plt.legend(loc='best')    #plt.show()    plt.savefig('fwThroats.tiff')    #plt.savefig('barchartContactAngle.png')    print("End")    '''    '''    historyMatchingPNM.readExpDataVTU()    #historyMatchingPNM.OFCallable([tInitial, 0],originalPath,True)    historyMatchingPNM.runHistoryMatch(2)    '''elif(Opt=='y'):    x0 = pi/4    originalPath = 'WWLewis/'    historyMatchingPNM.readExpDataDAT(originalPath)    bnds = Bounds(0,pi/2)    #res = minimize(historyMatchingPNM.OFOpt, x0,method='L-BFGS-B',bounds = bnds,options={'disp': True})    res = minimize_scalar(historyMatchingPNM.OFOpt, bounds=(0, pi/2), method='bounded')    print(res)        print('x = ', res.x,'Being successfull:', res.success, res.fun)elif(SA == 'y'):    Nx = 32    outPrint = np.zeros((Nx,4))    errorWeights = 'F'    model =  'blunt1'    Theta = np.linspace(0,pi,Nx)    originalPath = 'MWLewis/'#'newWWKamal/'#    historyMatchingPNM.readExpDataDAT(originalPath)    if __name__ == '__main__':        jobs = []        outTempFinal = Array('d', range(Nx))        outTempArea = Array('d', range(Nx))        cmdVector = Array('d', range(Nx))        outTempDiff= Array('d', range(Nx))        print('Theta = ', Theta)        for i in range(Nx):            cmdVector[i] = 1            p = Process(target=historyMatchingPNM.OFSA, args=(i,Theta[i],cmdVector,outTempDiff,outTempFinal,outTempArea,errorWeights))            jobs.append(p)            p.start()        for proc in jobs:            proc.join()        outPrint[:,0] = Theta*(180/pi)        outPrint[:,1] = outTempDiff        outPrint[:,2] = outTempFinal        outPrint[:,3] = outTempArea        np.savetxt(originalPath+'Results_'+errorWeights+'_'+model+'.dat',outPrint,fmt='%.6f')        #np.savetxt(originalPath+'ErrorArea'+model+'.dat',outTempArea,fmt='%.6f')                #np.savetxt(originalPath+'Theta.dat',Theta*(180/pi),fmt='%.6f')elif(PTDist == 'y'):    fileName = 'WWLewis'#'MWLewis2'#'WWLewis'#"WWKamal"#'MWAlessio'#'TDMWAlessio'#'gCA_MWSS'#'MWLewis'#'newWWKamal'#    originalPath = fileName + '/'    historyMatchingPNM.readExpDataDAT(originalPath)    #historyMatchingPNM.unifyOccupancy(np.zeros((2,2)))    #'''    historyMatchingPNM.typeSwIF()    historyMatchingPNM.plotPoreAndThroatDist(fileName+'U',41)    a,b=historyMatchingPNM.OFCallable([0, fileName+'U'],originalPath,'V',True)        #historyMatchingPNM.OFCallableSw([0, fileName+'U'],b,originalPath,'V',True)    #historyMatchingPNM.OFCallableOptSw([0, fileName+'U'],b,originalPath,'V',True)    historyMatchingPNM.OFCallableSw([0, fileName+'U'],b,originalPath,'V',True)        historyMatchingPNM.plotDistributionError(fileName+'U')    historyMatchingPNM.plotCAngleDistribution(fileName+'U',98,41,'F')    #'''            #historyMatchingPNM.plotDistributionError(fileName+'U')    #historyMatchingPNM.plotCAngleDistribution(fileName+'U',41,'F')    #'''